# ==============================================================================
# WhatsApp AI Chatbot - Environment Configuration Example
# ==============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit .env to version control - keep your secrets safe!

# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================

# Application identity and basic settings
APP_NAME="WhatsApp AI Chatbot"
APP_VERSION="1.0.0"
DEBUG=false
ENVIRONMENT=production

# ==============================================================================
# SERVER CONFIGURATION
# ==============================================================================

# Server host and port settings
HOST=0.0.0.0
PORT=8000
RELOAD=false

# ==============================================================================
# SECURITY CONFIGURATION (REQUIRED)
# ==============================================================================

# **REQUIRED** - Generate a secure random string for JWT token signing
# You can generate one using: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your-super-secret-key-here-replace-this

# JWT algorithm and token expiration
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# Database connection URL
# SQLite: sqlite:///./data/chatbot.db
# PostgreSQL: postgresql://user:password@localhost/dbname
# MySQL: mysql://user:password@localhost/dbname
DATABASE_URL=sqlite:///./data/chatbot.db

# Enable SQL query logging for debugging (set to true in development)
DATABASE_ECHO=false

# ==============================================================================
# AI SERVICE CONFIGURATION
# ==============================================================================

# **API Keys for AI Services** - At least one is required
# Get OpenAI API key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your-openai-api-key-here

# Get Anthropic API key from: https://console.anthropic.com/
ANTHROPIC_API_KEY=your-anthropic-api-key-here

# AI model settings
DEFAULT_AI_MODEL=gpt-3.5-turbo
MAX_TOKENS=2000
TEMPERATURE=0.7

# ==============================================================================
# FILE UPLOAD CONFIGURATION
# ==============================================================================

# Maximum file size in bytes (default: 10MB)
MAX_FILE_SIZE=10485760

# Allowed file extensions (comma-separated)
ALLOWED_FILE_EXTENSIONS=.txt,.pdf,.doc,.docx,.jpg,.jpeg,.png,.gif

# Directory for uploaded files
UPLOAD_DIR=./data/uploads

# ==============================================================================
# PROJECT MANAGEMENT
# ==============================================================================

# Directory for project files
DEFAULT_PROJECT_DIR=./data/projects

# Maximum projects per user
MAX_PROJECTS_PER_USER=10

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log message format
LOG_FORMAT="%(asctime)s - %(name)s - %(levelname)s - %(message)s"

# Log file location
LOG_FILE=./logs/app.log

# Log file rotation settings
LOG_MAX_SIZE=10485760
LOG_BACKUP_COUNT=5

# ==============================================================================
# VECTOR DATABASE CONFIGURATION
# ==============================================================================

# ChromaDB persistence directory
CHROMA_PERSIST_DIRECTORY=./data/chroma

# Embedding model for vector search
EMBEDDING_MODEL=all-MiniLM-L6-v2

# ==============================================================================
# REDIS CONFIGURATION
# ==============================================================================

# Redis connection URL for caching and sessions
REDIS_URL=redis://localhost:6379/0

# ==============================================================================
# RATE LIMITING
# ==============================================================================

# Rate limiting settings (requests per window)
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# ==============================================================================
# CORS CONFIGURATION
# ==============================================================================

# Allowed origins for CORS (comma-separated)
CORS_ORIGINS=["http://localhost:3000","http://localhost:8501"]

# CORS settings
CORS_CREDENTIALS=true
CORS_METHODS=*
CORS_HEADERS=*

# ==============================================================================
# WEBSOCKET CONFIGURATION
# ==============================================================================

# WebSocket connection limits
WS_MAX_CONNECTIONS=100
WS_HEARTBEAT_INTERVAL=30

# ==============================================================================
# FEATURE FLAGS
# ==============================================================================

# Enable/disable specific features
ENABLE_AI_CHAT=true
ENABLE_PROJECT_MANAGEMENT=true
ENABLE_FILE_UPLOAD=true
ENABLE_VOICE_MESSAGES=false
ENABLE_ANALYTICS=true

# ==============================================================================
# DEVELOPMENT NOTES
# ==============================================================================
#
# For Development Environment:
# - Set DEBUG=true
# - Set ENVIRONMENT=development
# - Set RELOAD=true
# - Set DATABASE_ECHO=true (to see SQL queries)
# - Set LOG_LEVEL=DEBUG
#
# For Production Environment:
# - Set DEBUG=false
# - Set ENVIRONMENT=production
# - Set RELOAD=false
# - Set DATABASE_ECHO=false
# - Set LOG_LEVEL=INFO or WARNING
# - Use strong SECRET_KEY
# - Use proper database (PostgreSQL/MySQL instead of SQLite)
# - Configure proper CORS_ORIGINS
#
# Security Checklist:
# ✓ Generate a strong SECRET_KEY
# ✓ Set proper CORS_ORIGINS (don't use * in production)
# ✓ Use HTTPS in production
# ✓ Set appropriate rate limits
# ✓ Use strong database credentials
# ✓ Keep API keys secure and rotate them regularly
#
# ==============================================================================