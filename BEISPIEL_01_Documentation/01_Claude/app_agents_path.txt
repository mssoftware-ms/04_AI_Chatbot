Agent Config ‚Äì Quellen & Pfade

Stand: 2025-08-16 17:50

Kurz√ºberblick
- Verf√ºgbare Agenten & Presets: `src/claude_flow_gui/constants.py` ‚Üí `AGENT_CATEGORIES`, `AGENT_PRESETS`.
- Geladene Auswahl/Modelle/Topologie: `<Projekt>/.claude-flow/saved-configs/*.json` (GUI l√§dt √ºber `apply_complete_config`).
- Projektspeicher/Mirror (nicht prim√§re Quelle des Fensters): `<Projekt>/.claude-flow/config.json`, `<Projekt>/.claude/config.json`.

Dateien & Zust√§ndigkeiten
1) `src/claude_flow_gui/constants.py`
   - `AGENT_CATEGORIES`: Kategorien, Namen, Farben, Agent-IDs, Kurzbeschreibungen.
   - `AGENT_PRESETS`: Vordefinierte Agent-Gruppen inkl. Topologie (z. B. hierarchical/star/mesh).

2) `<Projekt>/.claude-flow/saved-configs/*.json`
   - Prim√§re Quelle f√ºr das Agent-Config-Fenster beim Laden einer Konfiguration.
   - Relevante Schl√ºssel: `project.*`, `agents.selected`, `agents.queen_model`, `agents.worker_model`, `swarm.*`, `settings.*`, optional `codex_*`.

3) `src/claude_flow_gui/mixins/config_io.py`
   - `load_complete_config()`/`apply_complete_config(path)`: Liest Saved‚ÄëConfig und setzt UI‚ÄëFelder. `save_complete_config()` speichert.

4) `src/claude_flow_gui/mixins/ui_tabs.py`
   - Baut den Agent-Tab und nutzt `AGENT_CATEGORIES`/`AGENT_PRESETS` zur Anzeige/Filterung/Presets.

5) `src/claude_flow_gui/mixins/app_state.py`
   - `save_project_config(name, path)`: Spiegelt zus√§tzlich nach `<Projekt>/.claude-flow/config.json` und `<Projekt>/.claude/config.json`.

Aktuell geladene Konfiguration (dieses Projekt)
- Dateiname: `AI Coding Station.json`
- Preset (in der Datei vermerkt): `üêç Python Development`
- Speicherort (Windows): `D:\03_GIT\02_Python\01_AI Coding Station\.claude-flow\saved-configs\AI Coding Station.json`
- Speicherort (WSL): `/mnt/d/03_GIT/02_Python/01_AI Coding Station/.claude-flow/saved-configs/AI Coding Station.json`
- Ausgew√§hlte Agenten: 10 (queen, backend-dev, frontend-dev, system-architect, tester, performance-tester‚Ä¶)

Hinweise: Erkennen & Navigieren zur geladenen Config
- Header/Unsaved-Indicator: `*` hinter Tab‚ÄëTitel bei ungespeicherten √Ñnderungen.
- Current Project im Header: zeigt Name und Dir (Projekt‚ÄëRoot).
- Preset‚ÄëAnzeige (Agents‚ÄëTab): aktive Preset‚ÄëCombobox (z. B. `üêç Python Development` bzw. `Custom`).
- Manage Configurations: `Load Config` ‚Üí Liste aller Saved‚ÄëConfigs mit Name/Preset/Agentenzahl/Zeitstempel; `Load/Rename/Delete`.
- Speicherort √∂ffnen: Explorer ‚Üí Projektpfad ‚Üí `.claude-flow\saved-configs` | WSL Terminal ‚Üí `ls -la .claude-flow/saved-configs`.
- Zuletzt genutzter Speicherort: `.claude_flow/claude-flow-manager/config_history.json` ‚Üí `last_config_dir`.

Praktisches Beispiel (dieses Projekt)
- Projektpfad (Windows): `D:\03_GIT\02_Python\01_AI Coding Station`
- Saved‚ÄëConfig: `D:\03_GIT\02_Python\01_AI Coding Station\.claude-flow\saved-configs\AI Coding Station.json` (WSL: `/mnt/d/03_GIT/02_Python/01_AI Coding Station/.claude-flow/saved-configs/AI Coding Station.json`)
- Schritte:
  1. Project Setup ‚Üí Project Directory auf obigen Pfad setzen, Project Name: `AI Coding Station`.
  2. Agent Config ‚Üí Presets: `üêç Python Development` w√§hlen; optional Agenten manuell an-/abw√§hlen.
  3. Save Config ‚Üí Name: `AI Coding Station` (ergibt die Datei oben).
  4. Load Config ‚Üí `AI Coding Station` w√§hlen, UI wird aus Saved‚ÄëConfig bef√ºllt (Agenten, Modelle, Topologie, Task).
  5. Verifikation:
     ‚Ä¢ Windows: Datei √∂ffnen und `preset`, `agents.selected`, `swarm.topology` pr√ºfen.
     ‚Ä¢ WSL: `cat ".claude-flow/saved-configs/AI Coding Station.json" | jq '.preset, .agents.selected | length, .swarm.topology'`.

- Erwartete Werte (Auszug aus aktueller Datei):
  ‚Ä¢ preset: üêç Python Development
  ‚Ä¢ agents.selected: 10
  ‚Ä¢ first agents: queen, backend-dev, frontend-dev, system-architect, tester‚Ä¶

Quelle der Schwarm-Struktur (Instanzinitialisierung)

Priorit√§t der Informationsquellen (wie der Schwarm aufgebaut ist)
1) Saved-Config (prim√§r): `D:\03_GIT\02_Python\01_AI Coding Station\.claude-flow\saved-configs\AI Coding Station.json` (WSL: `/mnt/d/03_GIT/02_Python/01_AI Coding Station/.claude-flow/saved-configs/AI Coding Station.json`)
   - Schl√ºssel: `agents.selected`, `agents.queen_model`, `agents.worker_model`, `swarm.topology`, `swarm.task`, `settings.*`.
   - Wird beim Laden √ºber `apply_complete_config(...)` gesetzt (Datei: `src/claude_flow_gui/mixins/config_io.py`).

2) Preset (Fallback, wenn keine Saved-Config): `src/claude_flow_gui/constants.py` ‚Üí `AGENT_PRESETS`
   - Legt vordefinierte Agentenauswahl und `topology` fest; Auswahl in der UI im Agent-Tab.

3) Agenten-Katalog (Grundlage f√ºr Auswahl): `src/claude_flow_gui/constants.py` ‚Üí `AGENT_CATEGORIES`
   - Definiert verf√ºgbare Agenten pro Kategorie; daraus generiert die UI die Checkbox-Liste.

4) Mirrored Project Configs (sekund√§r): `<Projekt>/.claude-flow/config.json`, `<Projekt>/.claude/config.json`
   - Durch `save_project_config(...)` geschrieben; sekund√§r, aber f√ºr andere Tools lesbar.

5) Verbrauch/Start:
   - `ClaudeFlowManager` nutzt den UI-Zustand; Start via `HiveMixin` (src/claude_flow_gui/mixins/hive.py) und Ausf√ºhrung via `WSLBridge` (src/claude_flow_gui/wsl_bridge.py).

Nicht ma√ügeblich f√ºr die Schwarm-Struktur: `codex_cli.config.json` (betrifft Codex CLI Policies/Modelle).
